name: Build

on: [push, pull_request]

jobs:
  Init:
    runs-on: ubuntu-latest
    steps:
    - name: Create Build Tag
      run: |
        export BUILD_TAG=build-$(date -u +'%Y%m%d%H%M')
        echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
        mkdir -p dist
        echo -n $BUILD_TAG > dist/tag
    - name: Upload Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist

  Windows:
    runs-on: windows-latest
    needs: Init
    strategy:
      matrix:
        configuration: ["Debug", "Release"]
        include:
        - configuration: Debug
          build_param: --debug
          artifact_name: xemu-win-debug.zip
        - configuration: Release
          build_param:
          artifact_name: xemu-win-release.zip
    steps:
    - name: Clone Tree
      uses: actions/checkout@v2
    - name: Clone Tree (Unshallow)
      run: |
        git fetch --prune --unshallow --tags -f
    - name: Install Dependencies
      run: |
        echo "Downloading MSYS2 environment..."
        Invoke-WebRequest -Uri "https://github.com/mborgerson/xemu-msys2/releases/latest/download/msys64.7z" -OutFile "msys64.7z"
        echo "Extracting MSYS2 environment..."
        7z x -y msys64.7z "-oC:\tools\"
        echo "Updating MSYS2 environment..."
        C:\tools\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm"
        C:\tools\msys64\usr\bin\bash.exe -lc "pacman --needed --noconfirm -S mingw-w64-x86_64-libsamplerate"
    # - name: Initialize Compiler Cache
    #   id: cache
    #   uses: actions/cache@v1
    #   with:
    #     path: C:\tools\msys64\tmp\xemu-ccache
    #     key: cache-${{ runner.os }}-${{ matrix.configuration }}-${{ github.sha }}
    #     restore-keys: cache-${{ runner.os }}-${{ matrix.configuration }}-
    - name: Compile
      run: |
        C:\tools\msys64\usr\bin\bash.exe -lc @"
        set -e
        cd `$GITHUB_WORKSPACE
        # export CCACHE_DIR=/tmp/xemu-ccache
        # export CCACHE_MAXSIZE=250M
        # export PATH="/usr/lib/ccache/bin:/mingw64/bin:`$PATH"
        export PATH="/mingw64/bin:`$PATH"
        ./build.sh ${{ matrix.build_param }}
        # echo -e '\nCompiler Cache Stats:'
        # ccache -s -c
        "@
        7z a ${{ matrix.artifact_name }} .\dist\*
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: ${{ matrix.artifact_name }}

  Ubuntu:
    runs-on: ubuntu-latest
    needs: Init
    strategy:
      matrix:
        configuration: ["Debug", "Release"]
        include:
        - configuration: Debug
          build_param: --debug
          artifact_name: xemu-ubuntu-debug.tgz
        - configuration: Release
          build_param:
          artifact_name: xemu-ubuntu-release.tgz
    steps:
    - name: Clone Tree
      uses: actions/checkout@v2
    - name: Clone Tree (Unshallow)
      run: |
        git fetch --prune --unshallow --tags -f
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libepoxy-dev \
          libgtk-3-dev \
          libpixman-1-dev \
          libsdl2-dev \
          libsamplerate0-dev \
          ccache
    - name: Initialize Compiler Cache
      id: cache
      uses: actions/cache@v1
      with:
        path: /tmp/xemu-ccache
        key: cache-${{ runner.os }}-${{ matrix.configuration }}-${{ github.sha }}
        restore-keys: cache-${{ runner.os }}-${{ matrix.configuration }}-
    - name: Compile
      run: |
        export CCACHE_DIR=/tmp/xemu-ccache
        export CCACHE_MAXSIZE=250M
        export PATH="/usr/lib/ccache:$PATH"
        ./build.sh ${{ matrix.build_param }}
        echo -e "\nCompiler Cache Stats:"
        ccache -s -c
        tar -czvf ${{ matrix.artifact_name }} --transform "s#^dist#xemu#" dist
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: ${{ matrix.artifact_name }}

  macOS:
    runs-on: macos-11.0
    needs: Init
    strategy:
      matrix:
        configuration: ["Debug", "Release"]
        include:
        - configuration: Debug
          build_param: --debug
          artifact_name: xemu-macos-debug.zip
        - configuration: Release
          build_param:
          artifact_name: xemu-macos-release.zip
    steps:
    - name: Clone Tree
      uses: actions/checkout@v2
    - name: Clone Tree (Unshallow)
      run: |
        git fetch --prune --unshallow --tags -f
    - name: Install Dependencies
      run: |
        brew doctor || true
        brew update-reset
        brew install \
          ccache \
          coreutils \
          dylibbundler \
          libepoxy \
          pixman \
          pkg-config \
          libsamplerate \
          sdl2
    - name: Initialize Compiler Cache
      id: cache
      uses: actions/cache@v1
      with:
        path: /tmp/xemu-ccache
        key: cache-${{ runner.os }}-${{ matrix.configuration }}-${{ github.sha }}
        restore-keys: cache-${{ runner.os }}-${{ matrix.configuration }}-
    - name: Compile
      run: |
        export CCACHE_DIR=/tmp/xemu-ccache
        export CCACHE_MAXSIZE=250M
        export PATH="/usr/local/opt/ccache/libexec:$PATH"
        ./build.sh ${{ matrix.build_param }}
        echo -e "\nCompiler Cache Stats:"
        ccache -s -c
        pushd dist
        zip -r ../${{ matrix.artifact_name }} xemu.app
        popd
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: ${{ matrix.artifact_name }}

  Release:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/xemu-v'))
    runs-on: ubuntu-latest
    needs: [Ubuntu, Windows, macOS]
    env:
      BUILD_TAG:
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v1
      with:
        name: dist
    - name: Get Package Info
      run: |
        echo "BUILD_TAG=$(cat dist/tag)" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.BUILD_TAG }}
        release_name: ${{ env.BUILD_TAG }}
        draft: false
        prerelease: false
    - name: Upload Release Assets (Windows Debug Build)
      id: upload-release-asset-win-debug
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: xemu-win-debug.zip
        asset_path: dist/xemu-win-debug.zip
        asset_content_type: application/zip
    - name: Upload Release Assets (Windows Release Build)
      id: upload-release-asset-win-release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: xemu-win-release.zip
        asset_path: dist/xemu-win-release.zip
        asset_content_type: application/zip
    - name: Upload Release Assets (macOS Release Build)
      id: upload-release-asset-macos-release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: xemu-macos-release.zip
        asset_path: dist/xemu-macos-release.zip
        asset_content_type: application/zip
    - name: Upload Release Assets (macOS Debug Build)
      id: upload-release-asset-macos-debug
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_name: xemu-macos-debug.zip
        asset_path: dist/xemu-macos-debug.zip
        asset_content_type: application/zip

  # Sync archive version of source (including submodule code) to the
  # ppa-snapshot branch to work around limitations of the Launchpad platform,
  # namely: no network egress on package build, no custom scripting in source
  # package creation.
  PushToPPA:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/xemu-v'))
    needs: [Ubuntu, Windows, macOS]
    runs-on: ubuntu-latest
    steps:
    - name: Clone Tree
      uses: actions/checkout@v2
    - name: Clone Tree (Unshallow)
      run: |
        git fetch --prune --unshallow --tags -f
    - name: Create Source Archive
      run: |
        ./scripts/archive-source.sh archive.tgz
        mkdir archive
        pushd archive
        tar xf ../archive.tgz
        popd
    - name: Integrate Debian Packaging
      run: |
        # Clone deb branch containing packaging files
        git clone --branch=deb --depth=1 https://github.com/mborgerson/xemu.git /tmp/xemu-debian
        mv /tmp/xemu-debian/debian archive

        # Create changelog containing current version
        echo -e "xemu (1:$(cat archive/XEMU_VERSION)-0) unstable; urgency=medium\n" > archive/debian/changelog
        echo -e "  Built from $(cat archive/XEMU_VERSION)\n" >> archive/debian/changelog
        echo " -- Matt Borgerson <contact@mborgerson.com>  $(date -R)" >> archive/debian/changelog
    - name: Deploy Source Archive to Branch
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./archive
        publish_branch: ppa-snapshot
        force_orphan: true
